//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System.Data;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Common;
using ComplexCommerce.Data.SqlServer.Model.ComplexCommerceMockObjectSet;

namespace ComplexCommerce.Data.SqlServer.Model
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class ComplexCommerceMock : ObjectContextMockBase, IComplexCommerce
    {
    	public ComplexCommerceMock(IObjectContext objectContext)
            : base(objectContext)
        {
        }
        public virtual IObjectSet<Category> Category
        {
            get { return _category  ?? (_category = new MockObjectSet<Category>()); }
        }
        private IObjectSet<Category> _category;
        public virtual IObjectSet<CategoryXProductXStoreLocale> CategoryXProductXStoreLocale
        {
            get { return _categoryXProductXStoreLocale  ?? (_categoryXProductXStoreLocale = new MockObjectSet<CategoryXProductXStoreLocale>()); }
        }
        private IObjectSet<CategoryXProductXStoreLocale> _categoryXProductXStoreLocale;
        public virtual IObjectSet<Chain> Chain
        {
            get { return _chain  ?? (_chain = new MockObjectSet<Chain>()); }
        }
        private IObjectSet<Chain> _chain;
        public virtual IObjectSet<Product> Product
        {
            get { return _product  ?? (_product = new MockObjectSet<Product>()); }
        }
        private IObjectSet<Product> _product;
        public virtual IObjectSet<ProductXStoreLocale> ProductXStoreLocale
        {
            get { return _productXStoreLocale  ?? (_productXStoreLocale = new MockObjectSet<ProductXStoreLocale>()); }
        }
        private IObjectSet<ProductXStoreLocale> _productXStoreLocale;
        public virtual IObjectSet<Page> Page
        {
            get { return _page  ?? (_page = new MockObjectSet<Page>()); }
        }
        private IObjectSet<Page> _page;
        public virtual IObjectSet<Store> Store
        {
            get { return _store  ?? (_store = new MockObjectSet<Store>()); }
        }
        private IObjectSet<Store> _store;
        public virtual IObjectSet<StoreLocale> StoreLocale
        {
            get { return _storeLocale  ?? (_storeLocale = new MockObjectSet<StoreLocale>()); }
        }
        private IObjectSet<StoreLocale> _storeLocale;
    }
}
