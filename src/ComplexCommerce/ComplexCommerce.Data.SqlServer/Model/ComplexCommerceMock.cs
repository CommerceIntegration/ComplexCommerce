//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System.Data;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using ComplexCommerce.Data.SqlServer.Model.ComplexCommerceMockDbSet;

namespace ComplexCommerce.Data.SqlServer.Model
{
    /// <summary>
    /// The concrete mock context object that implements the context's interface.
    /// Provide an instance of this mock context class to client logic when testing, 
    /// instead of providing a functional context object.
    /// </summary>
    public partial class ComplexCommerceMock : DbContextMockBase, IComplexCommerce
    {
    	public ComplexCommerceMock(IDbContext dbContext)
            : base(dbContext)
        {
        }
        public virtual IDbSet<Chain> Chain
        {
            get { return _chain  ?? (_chain = new MockDbSet<Chain>()); }
    		set { _chain = value; }
        }
        private IDbSet<Chain> _chain;
        public virtual IDbSet<Product> Product
        {
            get { return _product  ?? (_product = new MockDbSet<Product>()); }
    		set { _product = value; }
        }
        private IDbSet<Product> _product;
        public virtual IDbSet<CategoryXProductXTenantLocale> CategoryXProductXTenantLocale
        {
            get { return _categoryXProductXTenantLocale  ?? (_categoryXProductXTenantLocale = new MockDbSet<CategoryXProductXTenantLocale>()); }
    		set { _categoryXProductXTenantLocale = value; }
        }
        private IDbSet<CategoryXProductXTenantLocale> _categoryXProductXTenantLocale;
        public virtual IDbSet<TenantLocale> TenantLocale
        {
            get { return _tenantLocale  ?? (_tenantLocale = new MockDbSet<TenantLocale>()); }
    		set { _tenantLocale = value; }
        }
        private IDbSet<TenantLocale> _tenantLocale;
        public virtual IDbSet<Tenant> Tenant
        {
            get { return _tenant  ?? (_tenant = new MockDbSet<Tenant>()); }
    		set { _tenant = value; }
        }
        private IDbSet<Tenant> _tenant;
        public virtual IDbSet<Page> Page
        {
            get { return _page  ?? (_page = new MockDbSet<Page>()); }
    		set { _page = value; }
        }
        private IDbSet<Page> _page;
        public virtual IDbSet<ProductXTenantLocale> ProductXTenantLocale
        {
            get { return _productXTenantLocale  ?? (_productXTenantLocale = new MockDbSet<ProductXTenantLocale>()); }
    		set { _productXTenantLocale = value; }
        }
        private IDbSet<ProductXTenantLocale> _productXTenantLocale;
    }
}
