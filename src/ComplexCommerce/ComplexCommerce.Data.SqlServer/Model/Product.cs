//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ComplexCommerce.Data.SqlServer.Model
{
    public partial class Product
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual int ChainId
        {
            get { return _chainId; }
            set
            {
                if (_chainId != value)
                {
                    if (Chain != null && Chain.Id != value)
                    {
                        Chain = null;
                    }
                    _chainId = value;
                }
            }
        }
        private int _chainId;
    
        public virtual string SKU
        {
            get;
            set;
        }
    
        public virtual string ImageUrl
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Price
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Chain Chain
        {
            get { return _chain; }
            set
            {
                if (!ReferenceEquals(_chain, value))
                {
                    var previousValue = _chain;
                    _chain = value;
                    FixupChain(previousValue);
                }
            }
        }
        private Chain _chain;
    
        public virtual ICollection<ProductXStoreLocale> ProductXStoreLocale
        {
            get
            {
                if (_productXStoreLocale == null)
                {
                    var newCollection = new FixupCollection<ProductXStoreLocale>();
                    newCollection.CollectionChanged += FixupProductXStoreLocale;
                    _productXStoreLocale = newCollection;
                }
                return _productXStoreLocale;
            }
            set
            {
                if (!ReferenceEquals(_productXStoreLocale, value))
                {
                    var previousValue = _productXStoreLocale as FixupCollection<ProductXStoreLocale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductXStoreLocale;
                    }
                    _productXStoreLocale = value;
                    var newValue = value as FixupCollection<ProductXStoreLocale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductXStoreLocale;
                    }
                }
            }
        }
        private ICollection<ProductXStoreLocale> _productXStoreLocale;

        #endregion

        #region Association Fixup
    
        private void FixupChain(Chain previousValue)
        {
            if (previousValue != null && previousValue.Product.Contains(this))
            {
                previousValue.Product.Remove(this);
            }
    
            if (Chain != null)
            {
                if (!Chain.Product.Contains(this))
                {
                    Chain.Product.Add(this);
                }
                if (ChainId != Chain.Id)
                {
                    ChainId = Chain.Id;
                }
            }
        }
    
        private void FixupProductXStoreLocale(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductXStoreLocale item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductXStoreLocale item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }

        #endregion

    }
}
