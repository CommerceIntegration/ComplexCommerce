//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System.Data;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Common;

namespace ComplexCommerce.Data.SqlServer.Model
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    /// </summary>
    public partial class ComplexCommerce : ObjectContext, IComplexCommerce 
    {
        public const string ConnectionString = "name=ComplexCommerce";
        public const string ContainerName = "ComplexCommerce";
    
        #region Constructors
    
        public ComplexCommerce():
            base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public ComplexCommerce(string connectionString):
            base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public ComplexCommerce(EntityConnection connection):
            base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<Chain> Chain
        {
            get { return _chain ?? (_chain = CreateObjectSet<Chain>("Chain")); }
        }
        private ObjectSet<Chain> _chain;
    
        public IObjectSet<Product> Product
        {
            get { return _product ?? (_product = CreateObjectSet<Product>("Product")); }
        }
        private ObjectSet<Product> _product;
    
        public IObjectSet<CategoryXProductXTenantLocale> CategoryXProductXTenantLocale
        {
            get { return _categoryXProductXTenantLocale ?? (_categoryXProductXTenantLocale = CreateObjectSet<CategoryXProductXTenantLocale>("CategoryXProductXTenantLocale")); }
        }
        private ObjectSet<CategoryXProductXTenantLocale> _categoryXProductXTenantLocale;
    
        public IObjectSet<ProductXTenantLocale> ProductXTenantLocale
        {
            get { return _productXTenantLocale ?? (_productXTenantLocale = CreateObjectSet<ProductXTenantLocale>("ProductXTenantLocale")); }
        }
        private ObjectSet<ProductXTenantLocale> _productXTenantLocale;
    
        public IObjectSet<TenantLocale> TenantLocale
        {
            get { return _tenantLocale ?? (_tenantLocale = CreateObjectSet<TenantLocale>("TenantLocale")); }
        }
        private ObjectSet<TenantLocale> _tenantLocale;
    
        public IObjectSet<Category> Category
        {
            get { return _category ?? (_category = CreateObjectSet<Category>("Category")); }
        }
        private ObjectSet<Category> _category;
    
        public IObjectSet<Page> Page
        {
            get { return _page ?? (_page = CreateObjectSet<Page>("Page")); }
        }
        private ObjectSet<Page> _page;
    
        public IObjectSet<Tenant> Tenant
        {
            get { return _tenant ?? (_tenant = CreateObjectSet<Tenant>("Tenant")); }
        }
        private ObjectSet<Tenant> _tenant;

        #endregion

    }
}
