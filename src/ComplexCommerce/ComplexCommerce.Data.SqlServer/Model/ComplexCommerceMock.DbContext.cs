//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Data;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using ComplexCommerce.Data.SqlServer.Model.ComplexCommerceMockDbSet;

namespace ComplexCommerce.Data.SqlServer.Model
{
    /// <summary>
    /// The default concrete implementation of IDbContext that will be used for mocking. 
    /// This contains all of the <code>IDbContext</code> members that are implemented in the 
    /// concrete DbContext class. This class was created so these members
    /// can be mocked.
    /// </summary>
    public abstract class DbContextMockBase : IDbContext
    {
        private readonly IDbContext _dbContext;
        public DbContextMockBase(IDbContext dbContext)
        {
            if (dbContext == null)
                throw new System.ArgumentNullException("dbContext");
            _dbContext = dbContext;
        }
    
        #region IDbContext Members
    
        public virtual DbChangeTracker ChangeTracker
        {
            get { return _dbContext.ChangeTracker; }
        }
    
        public virtual DbContextConfiguration Configuration
        {
            get { return _dbContext.Configuration; }
        }
    
        public virtual Database Database
        {
            get { return _dbContext.Database; }
        }
    
        public virtual DbEntityEntry Entry(object entity)
        {
            return _dbContext.Entry(entity);
        }
    
        public virtual DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            return _dbContext.Entry<TEntity>(entity);
        }
    
        public virtual IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            return _dbContext.GetValidationErrors();
        }
    
    	public virtual int SaveChanges()
        {
            return _dbContext.SaveChanges();
        }
    
        public virtual DbSet Set(Type entityType)
        {
            return _dbContext.Set(entityType);
        }
    
        public virtual DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            return _dbContext.Set<TEntity>();
        }
    
        #endregion
    
        #region IObjectContextAdapter Members
    
        public virtual ObjectContext ObjectContext
        {
            get { return _dbContext.ObjectContext; }
        }
    
        #endregion
    
    	#region IDisposable Members
    
        public void Dispose()
        {
            _dbContext.Dispose();
        }
    
        #endregion
    }
}
