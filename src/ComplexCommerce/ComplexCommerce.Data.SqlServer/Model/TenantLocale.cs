//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ComplexCommerce.Data.SqlServer.Model
{
    public partial class TenantLocale
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual int TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    if (Tenant != null && Tenant.Id != value)
                    {
                        Tenant = null;
                    }
                    _tenantId = value;
                }
            }
        }
        private int _tenantId;
    
        public virtual int LocaleId
        {
            get;
            set;
        }
    
        public virtual string SiteMap
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<ProductXTenantLocale> ProductXTenantLocale
        {
            get
            {
                if (_productXTenantLocale == null)
                {
                    var newCollection = new FixupCollection<ProductXTenantLocale>();
                    newCollection.CollectionChanged += FixupProductXTenantLocale;
                    _productXTenantLocale = newCollection;
                }
                return _productXTenantLocale;
            }
            set
            {
                if (!ReferenceEquals(_productXTenantLocale, value))
                {
                    var previousValue = _productXTenantLocale as FixupCollection<ProductXTenantLocale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductXTenantLocale;
                    }
                    _productXTenantLocale = value;
                    var newValue = value as FixupCollection<ProductXTenantLocale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductXTenantLocale;
                    }
                }
            }
        }
        private ICollection<ProductXTenantLocale> _productXTenantLocale;
    
        public virtual Tenant Tenant
        {
            get { return _tenant; }
            set
            {
                if (!ReferenceEquals(_tenant, value))
                {
                    var previousValue = _tenant;
                    _tenant = value;
                    FixupTenant(previousValue);
                }
            }
        }
        private Tenant _tenant;
    
        public virtual ICollection<Category> Category
        {
            get
            {
                if (_category == null)
                {
                    var newCollection = new FixupCollection<Category>();
                    newCollection.CollectionChanged += FixupCategory;
                    _category = newCollection;
                }
                return _category;
            }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category as FixupCollection<Category>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCategory;
                    }
                    _category = value;
                    var newValue = value as FixupCollection<Category>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCategory;
                    }
                }
            }
        }
        private ICollection<Category> _category;
    
        public virtual ICollection<Page> Page
        {
            get
            {
                if (_page == null)
                {
                    var newCollection = new FixupCollection<Page>();
                    newCollection.CollectionChanged += FixupPage;
                    _page = newCollection;
                }
                return _page;
            }
            set
            {
                if (!ReferenceEquals(_page, value))
                {
                    var previousValue = _page as FixupCollection<Page>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPage;
                    }
                    _page = value;
                    var newValue = value as FixupCollection<Page>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPage;
                    }
                }
            }
        }
        private ICollection<Page> _page;

        #endregion

        #region Association Fixup
    
        private void FixupTenant(Tenant previousValue)
        {
            if (previousValue != null && previousValue.TenantLocale.Contains(this))
            {
                previousValue.TenantLocale.Remove(this);
            }
    
            if (Tenant != null)
            {
                if (!Tenant.TenantLocale.Contains(this))
                {
                    Tenant.TenantLocale.Add(this);
                }
                if (TenantId != Tenant.Id)
                {
                    TenantId = Tenant.Id;
                }
            }
        }
    
        private void FixupProductXTenantLocale(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductXTenantLocale item in e.NewItems)
                {
                    item.TenantLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductXTenantLocale item in e.OldItems)
                {
                    if (ReferenceEquals(item.TenantLocale, this))
                    {
                        item.TenantLocale = null;
                    }
                }
            }
        }
    
        private void FixupCategory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    item.TenantLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (ReferenceEquals(item.TenantLocale, this))
                    {
                        item.TenantLocale = null;
                    }
                }
            }
        }
    
        private void FixupPage(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Page item in e.NewItems)
                {
                    item.TenantLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Page item in e.OldItems)
                {
                    if (ReferenceEquals(item.TenantLocale, this))
                    {
                        item.TenantLocale = null;
                    }
                }
            }
        }

        #endregion

    }
}
