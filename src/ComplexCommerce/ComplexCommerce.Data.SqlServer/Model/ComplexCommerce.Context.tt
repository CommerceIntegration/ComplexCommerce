<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
// Parts of this code written by Rab Hallett. Some of it
// taken from the Microsoft ADO.NET C# POCO Generator.
// http://blogofrab.blogspot.com
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#

// --------------------------------------------------------------
// Change this line to your EDMX file if you used Add -> New Item
const string inputFile = @"ComplexCommerce.edmx";
// --------------------------------------------------------------

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

EdmItemCollection ItemCollection = null;
//if ( inputFile == "$edmxInputFile" + "$" )
//{
//	fileManager.Process();
//	return "#error The T4 generation file was added to the project by using Add -> New Item, "
//		+ "but the inputFile string was not changed to the name of the EDMX file. "
//		+ "Open the \".tt\" file, and change the value of \"inputFile\". Use \"Add Code "
//		+ "Generation Item\" in the EDMX context menu to avoid this error in future.";
//}
//else
//{
	ItemCollection = loader.CreateEdmItemCollection(inputFile);
//}
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

WriteHeader();
WriteHeaderIncludeSystem();
WriteHeaderIncludeData();
WriteNamespaceBegin( code, namespaceName );
WriteQueryableExtension();
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( "I" + container.Name + ".cs");
WriteHeader();
WriteHeaderIncludeSystem();
WriteHeaderIncludeData();
WriteNamespaceBegin( code, namespaceName );
WriteInterface( container, code );
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( "IDbContext.cs");
WriteHeader();
WriteHeaderIncludeSystem();
WriteHeaderIncludeData();
WriteHeaderIncludeContainers();
WriteNamespaceBegin( code, namespaceName );
WriteDbContextInterface( container, code );
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( container.Name + ".cs");
WriteHeader();
WriteHeaderIncludeData();
WriteNamespaceBegin( code, namespaceName );
WriteConcreteContextBody( container, code, ef, region );
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( container.Name + "Mock.cs");
WriteHeader();
WriteHeaderIncludeData();
WriteAdditionalUsings( code, new string[] { namespaceName + "." + container + "MockDbSet" } );
WriteNamespaceBegin( code, namespaceName );
WriteMockContextBody( container, code );
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( container.Name + "Mock.DbContext.cs");
WriteHeader();
WriteHeaderIncludeSystem();
WriteHeaderIncludeData();
WriteHeaderIncludeContainers();
WriteAdditionalUsings( code, new string[] { namespaceName + "." + container + "MockDbSet" } );
WriteNamespaceBegin( code, namespaceName );
WriteDbContextMockBase( container, code );
WriteNamespaceEnd( namespaceName );

fileManager.StartNewFile( container.Name + "Mock.DbSet.cs");
WriteHeader();
WriteHeaderIncludeSystem();
WriteHeaderIncludeContainers();
WriteHeaderIncludeData();
WriteNamespaceBegin( code, namespaceName + "." + container + "MockDbSet" );
WriteMockDbSet();
WriteNamespaceEnd( namespaceName );

fileManager.Process();
#>


<#+
void WriteInterface( EntityContainer container, CodeGenerationTools code )
{
#>
/// <summary>
/// The interface for the specialized object context. This contains all of
/// the <code>IDbSet</code> properties that are implemented in both the
/// functional context class and the mock context class.
/// </summary>
<#=Accessibility.ForType(container)#> interface I<#=code.Escape(container)#> : IDbContext
{
<#+
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get; set; }
<#+
    }
#>
}
<#+
}
#>


<#+
void WriteDbContextInterface( EntityContainer container, CodeGenerationTools code )
{
#>
/// <summary>
/// The interface for the generic DB context. This contains all of
/// the <code>DbContext</code> properties that are implemented in the 
/// concrete DbContext class. This interface was created so these members
/// can be mocked, as DbContext doesn't have a default public constructor.
/// </summary>
<#=Accessibility.ForType(container)#> interface IDbContext
        : IDisposable, IObjectContextAdapter
{
	DbChangeTracker ChangeTracker { get; }
	DbContextConfiguration Configuration { get; }
	Database Database { get; }
	DbEntityEntry Entry(object entity);
	DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
	bool Equals(object obj);
	int GetHashCode();
	Type GetType();
	IEnumerable<DbEntityValidationResult> GetValidationErrors();
	int SaveChanges();
	DbSet Set(Type entityType);
	DbSet<TEntity> Set<TEntity>() where TEntity : class;
}
<#+
}
#>



<#+
void WriteDbContextMockBase( EntityContainer container, CodeGenerationTools code )
{
#>
/// <summary>
/// The default concrete implementation of IDbContext that will be used for mocking. 
/// This contains all of the <code>IDbContext</code> members that are implemented in the 
/// concrete DbContext class. This class was created so these members
/// can be mocked.
/// </summary>
<#=Accessibility.ForType(container)#> abstract class DbContextMockBase : IDbContext
{
    private readonly IDbContext _dbContext;
    public DbContextMockBase(IDbContext dbContext)
    {
        if (dbContext == null)
            throw new System.ArgumentNullException("dbContext");
        _dbContext = dbContext;
    }

    #region IDbContext Members

    public virtual DbChangeTracker ChangeTracker
    {
        get { return _dbContext.ChangeTracker; }
    }

    public virtual DbContextConfiguration Configuration
    {
        get { return _dbContext.Configuration; }
    }

    public virtual Database Database
    {
        get { return _dbContext.Database; }
    }

    public virtual DbEntityEntry Entry(object entity)
    {
        return _dbContext.Entry(entity);
    }

    public virtual DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
    {
        return _dbContext.Entry<TEntity>(entity);
    }

    public virtual IEnumerable<DbEntityValidationResult> GetValidationErrors()
    {
        return _dbContext.GetValidationErrors();
    }

	public virtual int SaveChanges()
    {
        return _dbContext.SaveChanges();
    }

    public virtual DbSet Set(Type entityType)
    {
        return _dbContext.Set(entityType);
    }

    public virtual DbSet<TEntity> Set<TEntity>() where TEntity : class
    {
        return _dbContext.Set<TEntity>();
    }

    #endregion

    #region IObjectContextAdapter Members

    public virtual ObjectContext ObjectContext
    {
        get { return _dbContext.ObjectContext; }
    }

    #endregion

	#region IDisposable Members

    public void Dispose()
    {
        _dbContext.Dispose();
    }

    #endregion
}
<#+
}
#>




<#+
void WriteMockContextBody( EntityContainer container, CodeGenerationTools code )
{
#>
/// <summary>
/// The concrete mock context object that implements the context's interface.
/// Provide an instance of this mock context class to client logic when testing, 
/// instead of providing a functional context object.
/// </summary>
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#>Mock : DbContextMockBase, I<#=code.Escape(container)#>
{
	public <#=code.Escape(container)#>Mock(IDbContext dbContext)
        : base(dbContext)
    {
    }
<#+
        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>
    <#=Accessibility.ForReadOnlyProperty(entitySet)#> virtual IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>
    {
        get { return <#=code.FieldName(entitySet) #>  ?? (<#=code.FieldName(entitySet)#> = new MockDbSet<<#=code.Escape(entitySet.ElementType)#>>()); }
		set { <#=code.FieldName(entitySet) #> = value; }
    }
    private IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.FieldName(entitySet)#>;
<#+
        }
#>
}
<#+
}
#>


<#+
void WriteConcreteContextBody( EntityContainer container, CodeGenerationTools code, MetadataTools ef, CodeRegion region )
{

#>
/// <summary>
/// The functional concrete db context. This is just like the normal
/// context that would be generated using the POCO artefact generator, 
/// apart from the fact that this one implements an interface containing 
/// the entity set properties and exposes <code>IDbSet</code>
/// instances for entity set properties.
/// </summary>
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : DbContext, I<#=code.Escape(container)#> 
{
    public <#=code.Escape(container)#>()
        : base("name=<#=container.Name#>")
    {
<#+
        WriteLazyLoadingEnabled(container);
#>
    }

	public ComplexCommerce(string connectionString)
        : base(connectionString)
    {
<#+
        WriteLazyLoadingEnabled(container);
#>
    }

<#+
        region.Begin("IDbSet Properties", 2);


        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>
    <#=Accessibility.ForReadOnlyProperty(entitySet)#> IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get; set; }
<#+
        }

        region.End();

        region.Begin("Function Imports");

        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            var parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            if (edmFunction.ReturnParameter == null)
            {
                continue;
            }
            string returnTypeElement = code.Escape(ef.GetElementType(edmFunction.ReturnParameter.TypeUsage));

#>
    <#=Accessibility.ForMethod(edmFunction)#> ObjectResult<<#=returnTypeElement#>> <#=code.Escape(edmFunction)#>(<#=paramList#>)
    {
<#+
            foreach (var parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                {
                    continue;
                }
#>

        ObjectParameter <#=parameter.LocalVariableName#>;

        if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
        }
        else
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
        }
<#+
            }
#>
        return base.ExecuteFunction<<#=returnTypeElement#>>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))#>);
    }
<#+
		}

        region.End();
#>
}
<#+
}
#>

<#+
void WriteMockDbSet()
{
#>
    /// <summary>
    /// Concrete data set for use with Mock contexts. Implements all of the
    /// required interfaces, but performs no database functionality; instead
    /// merely stores the data for testing.
    /// </summary>
    public partial class MockDbSet<T>
        : IDbSet<T>
        where T : class
    {
        private readonly ObservableCollection<T> _container = new ObservableCollection<T>();

        #region IDbSet<T> Members

        public virtual T Add(T entity)
        {
            _container.Add(entity);
            return entity;
        }

        public virtual T Attach(T entity)
        {
            _container.Add(entity);
            return entity;
        }

        public virtual TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, T
        {
            return (TDerivedEntity)Activator.CreateInstance(typeof(TDerivedEntity));
        }

        public virtual T Create()
        {
            return (T)Activator.CreateInstance(typeof(T));
        }

        public virtual T Find(params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual ObservableCollection<T> Local
        {
            get { return _container; }
        }

        public virtual T Remove(T entity)
        {
            _container.Remove(entity);
            return entity;
        }

        #endregion

        #region IEnumerable<T> Members

        public virtual IEnumerator<T> GetEnumerator()
        {
            return _container.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _container.GetEnumerator();
        }

        #endregion

        #region IQueryable Members

        public virtual Type ElementType
        {
            get { return _container.AsQueryable<T>().ElementType; }
        }

        public virtual Expression Expression
        {
            get { return _container.AsQueryable<T>().Expression; }
        }

        public virtual IQueryProvider Provider
        {
            get { return _container.AsQueryable<T>().Provider; }
        }

        #endregion
    }
<#+
}
#>

<#+
private void WriteLazyLoadingEnabled(EntityContainer container)
{
   string lazyLoadingAttributeValue = null;
   string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
   if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
   {
       bool isLazyLoading = false;
       if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
       {
#>
        this.Configuration.LazyLoadingEnabled = <#=isLazyLoading.ToString().ToLowerInvariant()#>;
<#+
       }
   }
}
#>

<#+
void WriteHeader()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Architectural overview and usage guide: 
// http://blogofrab.blogspot.com/2010/08/maintenance-free-mocking-for-unit.html
//------------------------------------------------------------------------------
<#+
}
#>

<#+
void WriteHeaderIncludeSystem()
{
#>
using System;
using System.Linq;
using System.Linq.Expressions;
<#+
}
#>

<#+
void WriteHeaderIncludeContainers()
{
#>
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#+
}
#>

<#+
void WriteHeaderIncludeData()
{
#>
using System.Data;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
<#+
}
#>

<#+
void WriteAdditionalUsings( CodeGenerationTools code, string[] additionalUsings )
{
	if ( additionalUsings != null )
	{
		foreach( string additionalUsing in additionalUsings )
		{
#>
using <#=code.EscapeNamespace(additionalUsing)#>;
<#+
		}
	}
}
#>

<#+
void WriteQueryableExtension()
{
#>
/// <summary>
/// Additional extension for interface <code>IQueryableExtension</code>, to
/// allow includes on <code>IObjectSet</code> when using mocking contexts.
/// </summary>
public static class IQueryableExtension
{
    public static IQueryable<T> Include<T>
        (this IQueryable<T> source, string path)
        where T : class
    {
        ObjectQuery<T> objectQuery = source as ObjectQuery<T>;
        if (objectQuery != null)
        {
            return objectQuery.Include(path);
        }
        return source;
    }
}
<#+
}
#>

<#+
void WriteNamespaceBegin( CodeGenerationTools code, string namespaceName )
{
	if (!String.IsNullOrEmpty(namespaceName))
	{
#>

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
		PushIndent(CodeRegion.GetIndent(1));
	}
}
#>

<#+
void WriteNamespaceEnd( string namespaceName )
{
	if (!String.IsNullOrEmpty(namespaceName))
	{
		PopIndent();
#>
}
<#+
	}
}
#>
