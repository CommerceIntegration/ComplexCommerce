//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ComplexCommerce.Data.SqlServer.Model
{
    public partial class StoreLocale
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual int StoreId
        {
            get { return _storeId; }
            set
            {
                if (_storeId != value)
                {
                    if (Store != null && Store.Id != value)
                    {
                        Store = null;
                    }
                    _storeId = value;
                }
            }
        }
        private int _storeId;
    
        public virtual int LocaleId
        {
            get;
            set;
        }
    
        public virtual string SiteMap
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Category> Category
        {
            get
            {
                if (_category == null)
                {
                    var newCollection = new FixupCollection<Category>();
                    newCollection.CollectionChanged += FixupCategory;
                    _category = newCollection;
                }
                return _category;
            }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category as FixupCollection<Category>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCategory;
                    }
                    _category = value;
                    var newValue = value as FixupCollection<Category>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCategory;
                    }
                }
            }
        }
        private ICollection<Category> _category;
    
        public virtual ICollection<Page> Page
        {
            get
            {
                if (_page == null)
                {
                    var newCollection = new FixupCollection<Page>();
                    newCollection.CollectionChanged += FixupPage;
                    _page = newCollection;
                }
                return _page;
            }
            set
            {
                if (!ReferenceEquals(_page, value))
                {
                    var previousValue = _page as FixupCollection<Page>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPage;
                    }
                    _page = value;
                    var newValue = value as FixupCollection<Page>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPage;
                    }
                }
            }
        }
        private ICollection<Page> _page;
    
        public virtual ICollection<ProductXStoreLocale> ProductXStoreLocale
        {
            get
            {
                if (_productXStoreLocale == null)
                {
                    var newCollection = new FixupCollection<ProductXStoreLocale>();
                    newCollection.CollectionChanged += FixupProductXStoreLocale;
                    _productXStoreLocale = newCollection;
                }
                return _productXStoreLocale;
            }
            set
            {
                if (!ReferenceEquals(_productXStoreLocale, value))
                {
                    var previousValue = _productXStoreLocale as FixupCollection<ProductXStoreLocale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductXStoreLocale;
                    }
                    _productXStoreLocale = value;
                    var newValue = value as FixupCollection<ProductXStoreLocale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductXStoreLocale;
                    }
                }
            }
        }
        private ICollection<ProductXStoreLocale> _productXStoreLocale;
    
        public virtual Store Store
        {
            get { return _store; }
            set
            {
                if (!ReferenceEquals(_store, value))
                {
                    var previousValue = _store;
                    _store = value;
                    FixupStore(previousValue);
                }
            }
        }
        private Store _store;

        #endregion

        #region Association Fixup
    
        private void FixupStore(Store previousValue)
        {
            if (previousValue != null && previousValue.StoreLocale.Contains(this))
            {
                previousValue.StoreLocale.Remove(this);
            }
    
            if (Store != null)
            {
                if (!Store.StoreLocale.Contains(this))
                {
                    Store.StoreLocale.Add(this);
                }
                if (StoreId != Store.Id)
                {
                    StoreId = Store.Id;
                }
            }
        }
    
        private void FixupCategory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    item.StoreLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (ReferenceEquals(item.StoreLocale, this))
                    {
                        item.StoreLocale = null;
                    }
                }
            }
        }
    
        private void FixupPage(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Page item in e.NewItems)
                {
                    item.StoreLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Page item in e.OldItems)
                {
                    if (ReferenceEquals(item.StoreLocale, this))
                    {
                        item.StoreLocale = null;
                    }
                }
            }
        }
    
        private void FixupProductXStoreLocale(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductXStoreLocale item in e.NewItems)
                {
                    item.StoreLocale = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductXStoreLocale item in e.OldItems)
                {
                    if (ReferenceEquals(item.StoreLocale, this))
                    {
                        item.StoreLocale = null;
                    }
                }
            }
        }

        #endregion

    }
}
